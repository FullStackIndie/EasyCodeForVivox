<?xml version="1.0"?>
<doc>
    <assembly>
        <name>VivoxAccessToken</name>
    </assembly>
    <members>
        <member name="T:VivoxAccessToken.AccessToken">
            <summary>
            Copied from Vivox General Unity Documentation.
            Creates Secure Token for Vivox API requests, needed for production ready applications
            <remarks> 
            <para>Slightly Altered From Vivox Example To Create Proper Token</para>
            </remarks>
            </summary>
        </member>
        <member name="M:VivoxAccessToken.AccessToken.Token_f(System.String,System.String,System.Int32,System.String,System.Int32,System.String,System.String,System.String)">
             <summary>
             Vivox Access Token(VAT) format class to generate valid request tokens.
             Read more on Vivox Documentation
             <remarks>
             <para>Token_F is the only method needed to create all neccessary types of tokens In Vivox</para>
             <para>Names and acronyms are mostly consistent with Vivox Documentation to avoid confusion but expanded upon for better understanding</para>
             </remarks>
             <list type="bullet">
             <item>
             <term>key</term>
             <description> Token Key - Get From Vivox Developer Portal</description>
             </item>     
             <item>
             <term>iss</term>
             <description> Token Issuer - Get From Vivox Developer Portal</description>
             </item>
             <item>
             <term>exp</term>
             <description> Expiration - Vivox Uses Unix Epoch time - Add Expiration time to Epoch value</description>
             </item>
             <item>
             <term>vxa</term>
             <description> Vivox Action to perform - Refer To Vivox Documentation</description>
             </item>
             <item>
             <term>vxi</term>
             <description> Unique Identifier - Create from a custom counter or Unique GUID</description>
             </item>    
             /// <item>
             <term>sub</term>
             <description> Subject : The User to mute, unmute, kick etc.</description>
             </item>      
             <item>
             <term>f</term>
             <description> From : The User requesting an action, Usually self or Admin.</description>
             </item>
             <item>
             <term>t</term>
             <description> Channel : The Channel to join, mute, kick, transcribe(Speech-To-Text Vivox Paid Service) etc.</description>
             </item>   
             </list>
             </summary>
             <param name="key">Token Key From Vivox Developer Portal</param>
             <param name="issuer">Application Issuer - Vivox Developer Portal</param>
             <param name="exp">Time in epoch + 90 seconds or prefered timeout</param>
             <param name="vxa">Vivox Action to perform : ex. login, kick, join</param>
             <param name="vxi">Unique identifier to garauntee unique Token. Recommended to use counter on server</param>
             <param name="sub">sub == Subject : The User to mute, unmute, kick etc.</param>
             <param name="f">f == From : The User requesting an action</param>
             <param name="t">t == Channel : The Channel to join, mute, kick, transcribe etc.</param>
             <remarks>
             <para>Token creation for Kicking people from channels, Muting people, Muting All except one person(Presentation Mode).</para>
             <para>If (Admin) you can kick people from channels or servers.</para>
             <para>If (Admin) you can mute people in channels, muting all except one(Presentation Mode).</para>
             <para>SIP URI(Address) required for f, t, and sub.</para>
             <para>SUB, F, T Can/Should be Null if not needed for the claim/action request.</para>
             <para>ex. login only needs the f paramater, sub == null, t == null.</para>
             <para>ex. Token_F("yourTokenKey", "blindmelon-AppName-dev", (int)epochTime, "login", 0001, null, "sip:.blindmelon-AppName-dev.jerky.@tla.vivox.com", null)</para>
             </remarks>
             <returns>A Valid Token For Production Code with Vivox</returns>
             
            
        </member>
        <member name="F:VivoxAccessToken.AccessToken.unixEpoch">
            <value>Holds Unix Epoch (January 1st, 1970, 00:00:00) - Used in <see cref="M:VivoxAccessToken.AccessToken.SecondsSinceUnixEpochPlusDuration(System.Nullable{System.TimeSpan})"></see></value>
        </member>
        <member name="M:VivoxAccessToken.AccessToken.SecondsSinceUnixEpochPlusDuration(System.Nullable{System.TimeSpan})">
            <summary>
            Copied Implementation From Vivox API
            Used for obtaining time in seconds of Unix Epoch to Now(Current Time) with the option of an added duration.
            </summary>
            <param name="duration">Timespan ahead of (DateTime.UtcNow - Unix Epoch) you want to have a timestamp for.</param>
            <returns>The time in seconds from Unix Epoch (January 1st, 1970, 00:00:00) to DateTime.UtcNow with an added duration.</returns>
            see <see cref="M:VivoxAccessToken.AccessToken.Token_f(System.String,System.String,System.Int32,System.String,System.Int32,System.String,System.String,System.String)"/> see epoch time.
        </member>
        <member name="T:VivoxAccessToken.AccessToken.Claims">
            <summary>
            Vivox Access Token(VAT) format class to generate valid request tokens.
            Read more on Vivox Documentation
            <remarks>
            <para>Token_F is the only method needed to create all neccessary types of tokens In Vivox</para>
            <para>Names and acronyms are mostly consistent with Vivox Documentation to avoid confusion but expanded upon for better understanding</para>
            </remarks>
            <list type="bullet">
            <item>
            <term>iss</term>
            <description> Token Issuer - Get From Vivox Developer Portal</description>
            </item>
            <item>
            <term>exp</term>
            <description> Expiration - Vivox Uses Unix Epoch time - Add Expiration time to Epoch value</description>
            </item>
            <item>
            <term>vxa</term>
            <description> Vivox Action to perform - Login, Join Channel, Kick, Mute etc.</description>
            </item>
            <item>
            <term>vxi</term>
            <description> Unique Identifier - Create from a custom counter or Unique GUID</description>
            </item>    
            /// <item>
            <term>sub</term>
            <description> Subject : The User to mute, unmute, kick etc.</description>
            </item>      
            <item>
            <term>f</term>
            <description> From : The User requesting an action, Usually self or Admin.</description>
            </item>
            <item>
            <term>t</term>
            <description> Channel : The Channel to join, mute, kick, transcribe(Speech-To-Text Vivox Paid Service) etc.</description>
            </item>   
            </list>
            </summary>
        </member>
        <member name="P:VivoxAccessToken.AccessToken.Claims.iss">
            <summary>
            Issuer : Get from Vivox Developer Portal
            </summary>
        </member>
        <member name="P:VivoxAccessToken.AccessToken.Claims.exp">
            <summary>
            Epoch Time : Vivox uses Unix Epoch time.
            ex. DateTime(1970, 1, 1, 0, 0, 0, DateTimeKind.Utc)
            </summary>
        </member>
        <member name="P:VivoxAccessToken.AccessToken.Claims.vxa">
            <summary>
            VixoxAction : ex. login, join, mute
            </summary>
        </member>
        <member name="P:VivoxAccessToken.AccessToken.Claims.vxi">
            <summary>
            Token Uniqueness Identifier : Can be any number.
            Recommended to use an incrimental counter so every token generated will always be different.
            ex. int counter = 0;
            counter++;
            </summary>
        </member>
        <member name="P:VivoxAccessToken.AccessToken.Claims.sub">
            <summary>
            Subject : The user to be muted, kicked, unmuted
            ex. format == 	sip:.blindmelon-AppName-dev.jerky.@tla.vivox.com
            </summary>
        </member>
        <member name="P:VivoxAccessToken.AccessToken.Claims.f">
            <summary>
            From : The user requesting a claim/action
            ex. format == 	sip:.blindmelon-AppName-dev.beef.@tla.vivox.com
            </summary>
        </member>
        <member name="P:VivoxAccessToken.AccessToken.Claims.t">
            <summary>
            Channel : Channel where action/claim takes place.
            ex. format ==	sip:confctl-g-blindmelon-AppName-dev.testchannel@tla.vivox.com
            </summary>
        </member>
    </members>
</doc>

<EasyCode>
	<AccessToken name="EasyAccessToken">
		<summary>
			Copied from Vivox General Unity Documentation.
			Creates Secure Token for Vivox API requests, needed for production ready applications
			<remarks>
				<para>Slightly Altered From Vivox Example To Create Proper Token</para>
			</remarks>
		</summary>
	</AccessToken>
	<AccessToken name="CreateToken">
		<summary>
			Vivox Access Token(VAT) format class to generate valid request tokens.
			Read more on Vivox Documentation
			<remarks>
				<para>This is the only method needed to create all neccessary types of tokens In Vivox</para>
				<para>Names and acronyms are mostly consistent with Vivox Documentation to avoid confusion but expanded upon for better understanding</para>
			</remarks>
			<list type="bullet">
				<item>
					<term>key</term>
					<description> Token Key - Get From Vivox Developer Portal</description>
				</item>
				<item>
					<term>iss</term>
					<description> Token Issuer - Get From Vivox Developer Portal</description>
				</item>
				<item>
					<term>exp</term>
					<description> Expiration - Vivox Uses Unix Epoch time - Add Expiration time to Epoch value</description>
				</item>
				<item>
					<term>vxa</term>
					<description> Vivox Action to perform - Refer To Vivox Documentation</description>
				</item>
				<item>
					<term>vxi</term>
					<description> Unique Identifier - Create from a custom counter or Unique GUID</description>
				</item>
				<item>
					<term>sub</term>
					<description> Subject : The User to mute, unmute, kick etc.</description>
				</item>
				<item>
					<term>f</term>
					<description> From : The User requesting an action, Usually self or Admin.</description>
				</item>
				<item>
					<term>t</term>
					<description> Channel : The Channel to join, mute, kick, transcribe(Speech-To-Text Vivox Paid Service) etc.</description>
				</item>
			</list>
		</summary>
		<param name="key">Token Key From Vivox Developer Portal</param>
		<param name="issuer">Application Issuer - Vivox Developer Portal</param>
		<param name="exp">Time in epoch + 90 seconds or prefered timeout</param>
		<param name="vxa">Vivox Action to perform : ex. login, kick, join</param>
		<param name="vxi">Unique identifier to garauntee unique Token. Recommended to use counter on server</param>
		<param name="sub">sub == Subject : The User to mute, unmute, kick etc.</param>
		<param name="f">f == From : The User requesting an action</param>
		<param name="t">t == Channel : The Channel to join, mute, kick, transcribe etc.</param>
		<remarks>
			<para>Token creation for Kicking people from channels, Muting people, Muting All except one person(Presentation Mode).</para>
			<para>If (Admin) you can kick people from channels or servers.</para>
			<para>If (Admin) you can mute people in channels, muting all except one(Presentation Mode).</para>
			<para>SIP URI(Address) required for f, t, and sub.</para>
			<para>SUB, F, T Can/Should be Null if not needed for the claim/action request.</para>
			<para>ex. login only needs the f paramater, sub == null, t == null.</para>
			<para>ex. Token_F("yourTokenKey", "blindmelon-AppName-dev", (int)epochTime, "login", 0001, null, "sip:.blindmelon-AppName-dev.jerky.@tla.vivox.com", null)</para>
		</remarks>
		<returns>A Valid Token For Production Code with Vivox (JWT with empty header)</returns>
	</AccessToken>
	<AccessToken name="UnixEpoch">
		<value>
			Gets Unix Epoch (January 1st, 1970, 00:00:00) to create valid expiration times for Vivox Access Tokens- Used in <see cref="SecondsSinceUnixEpochPlusDuration(TimeSpan?)"></see>
		</value>
	</AccessToken>
	<AccessToken name="SecondsSinceUnixEpochPlusDuration">
		<summary>
			Copied Implementation From Vivox API
			Used for obtaining time in seconds of Unix Epoch to Now(Current Time) with the option of an added duration.
		</summary>
		<param name="duration">Timespan ahead of (DateTime.UtcNow - Unix Epoch) you want to have a timestamp for.</param>
		<returns>The time in seconds from Unix Epoch (January 1st, 1970, 00:00:00) to DateTime.UtcNow with an added duration.</returns>
		see <see cref="EasyAccessToken.CreateToken(string, string, int, string, int, string, string, string)"/> see epoch time.
	</AccessToken>
	<AccessToken name="Base64URLEncode">
		Creates Base64 Encoded string from the Json payload and then strips the padding from it <see href="https://www.rfc-editor.org/rfc/rfc7515#appendix-C"></see>
	</AccessToken>
	<AccessToken name="SHA256Hash">
		Signs the JWT payload
	</AccessToken>
	<AccessToken name="Claims">
		<summary>
			Vivox Access Token(VAT) format class to generate valid request tokens.
			Read more on Vivox Documentation
			<remarks>
				<para>
				Class/Model that will be seriliazed by <see cref="UnityEngine.JsonUtility">JsonUtility</see> 
				to create the JSON payload that will be used to create the Vivox Access Token
				</para>
			</remarks>
			<list type="bullet">
				<item>
					<term>iss</term>
					<description> Token Issuer - Get From Vivox Developer Portal</description>
				</item>
				<item>
					<term>exp</term>
					<description> Expiration - Vivox Uses Unix Epoch time - Add Expiration time to Epoch value</description>
				</item>
				<item>
					<term>vxa</term>
					<description> Vivox Action to perform - Login, Join Channel, Kick, Mute etc.</description>
				</item>
				<item>
					<term>vxi</term>
					<description> Unique Identifier - Create from a custom counter or Unique GUID</description>
				</item>
				<item>
					<term>sub</term>
					<description> Subject : The User to mute, unmute, kick etc.</description>
				</item>
				<item>
					<term>f</term>
					<description> From : The User requesting an action, Usually self or Admin.</description>
				</item>
				<item>
					<term>t</term>
					<description> Channel : The Channel to join, mute, kick, transcribe(Speech-To-Text Vivox Paid Service) etc.</description>
				</item>
			</list>
		</summary>
	</AccessToken>
</EasyCode>